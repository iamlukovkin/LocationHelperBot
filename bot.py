import os
import shutil
import datetime
import logging
import time
import base64
import httplib2
import requests

import telebot as tb

from telebot import types
from pathlib import Path
from docx import Document
from docx.shared import Pt
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.style import WD_STYLE_TYPE
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from oauth2client.service_account import ServiceAccountCredentials
from common import ButtonsText
from common import AnswerText

def pyDrive():
    gauth = GoogleAuth()
    scope = ["https://www.googleapis.com/auth/drive"]
    gauth.credentials = ServiceAccountCredentials.from_json_keyfile_name('locationbot-389713-571b4d9edd7a.json', scope)
    gauth.Authorize()
    drive = GoogleDrive(gauth)
    return drive


drive = pyDrive()
chat_api = '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'
TOKEN = '6048732407:AAEGRA6prdW1ymtjLamIvn53_vDh_IyQ5yE'
ADMIN_TOKEN = '5974126919:AAEURflwb8Gmqzy_iEhp4Gy3DqF6wxgE_Ks'


bot = tb.TeleBot(token = TOKEN)
ab = tb.TeleBot(token = ADMIN_TOKEN)

methods_id = '1gXDbDUoYDfI6cFhwbIrq35SpOZCyYhxm'

cache_data = {}
del_cache = {}
adm_cache = {}

PD_log = {
    'Year': '',
    'Camp': '',
    'Squad': ''
}

PD_data = {
    'Year': [],
    'Camp': [],
    'Squad': []
}

questions = {
    'Q1': '–î–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è',
    'Q2': '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è',
    'Q3': '–¶–µ–ª–∏ –¥–Ω—è',
    'Q4': '–ü–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å',
    'Q5': '–ê–Ω–∞–ª–∏–∑ –¥–Ω—è, –≤—ã–≤–æ–¥—ã, —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è',
    'Q6': '–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –∞–≤—Ç–æ—Ä–∞ –∑–∞–ø–∏—Å–∏'
}

answers = {
    'Q1': '–ü—É—Å—Ç–æ',
    'Q2': '–ü—É—Å—Ç–æ',
    'Q3': '–ü—É—Å—Ç–æ',
    'Q4': '–ü—É—Å—Ç–æ',
    'Q5': '–ü—É—Å—Ç–æ',
    'Q6': '–ü—É—Å—Ç–æ'
}


def check_folder(folder_id):
    drive = pyDrive()
    file_list = drive.ListFile({'q': f"'{folder_id}' in parents and trashed=false"}).GetList()
    return file_list


def check_user(user_id, param):
    ans = None
    if param == 'user_name':
        search = 1
    elif param == 'folder_id':
        search = 2
    elif param == 'methods_folder_id':
        search = 3
    elif param == 'diary_folder_id':
        search = 4
    with open('Admin/DB.txt', 'r') as f:
        for line in f:
            line = line.strip()
            parts = line.split(":")
            for i in range(0, len(parts)):
                if parts[0] == str(user_id):
                    ans = parts[search].strip() if search != 1 else parts[search]
    return ans


@bot.callback_query_handler(func=lambda call: call.data in cache_data.keys())
def accept_file(call):
    global cache_data
    bot.delete_message(
        chat_id = call.message.chat.id,
        message_id = call.message.message_id
        )
    id = call.message.chat.id
    txt = f'–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ñ–∞–π–ª–æ–º "{call.data}"?'
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.row(
        types.InlineKeyboardButton(
            text=ButtonsText.download,
            callback_data=f'DOWN{call.data}'
            ),
        types.InlineKeyboardButton(
            text=ButtonsText.delete,
            callback_data=f'DELE{call.data}'
            )
    )
    bot.send_message(
        chat_id=id,
        text=txt,
        reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data[:4] =='DOWN')
def get_file_usr(call):
    drive = pyDrive()
    bot.delete_message(
        chat_id = call.message.chat.id,
        message_id = call.message.message_id
        )
    global cache_data
    file_name = call.data[4:]
    data = cache_data[file_name]
    parts = data.split(':')
    dir_id = parts[0]
    file_id = parts[1]
    chat_id = parts[2]
    func = parts[3]
    list_files = check_folder(dir_id)
    for file in list_files:
        dir = f"Cache/{file['title']}"
        if file_id == file['id']:
            file = drive.CreateFile({'id': file_id})
            file.GetContentFile(dir)
            if dir[-4:] == '.jpg':
                bot.send_photo(
                    chat_id=chat_id,
                    photo = open(dir, 'rb')
                    )
            else:
                bot.send_document(
                    chat_id=chat_id,
                    document=open(dir, 'rb')
                    )
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.row(
                types.InlineKeyboardButton(
                    text=ButtonsText.back,
                    callback_data=func
                    ),
                types.InlineKeyboardButton(
                    text=ButtonsText.main,
                    callback_data='main'
                    )
                )
            bot.send_message(
                chat_id=chat_id,
                text=f'–§–∞–π–ª {file["title"]} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!',
                reply_markup=markup
                )
            os.remove(dir)


@bot.callback_query_handler(func=lambda call: call.data in adm_cache.keys())
def get_file_adm(call):
    drive = pyDrive()
    bot.delete_message(
        chat_id = call.message.chat.id,
        message_id = call.message.message_id
        )
    global adm_cache
    file_name = call.data
    data = adm_cache[file_name]
    parts = data.split(':')
    dir_id = parts[0]
    file_id = parts[1]
    chat_id = parts[2]
    func = parts[3]
    list_files = check_folder(dir_id)
    for file in list_files:
        dir = f"Cache/{file['title']}"
        if file_id == file['id']:
            file = drive.CreateFile({'id': file_id})
            file.GetContentFile(dir)
            with open(dir, 'rb') as f:
                folder_id = check_user(
                    user_id=chat_id,
                    param="methods_folder_id"
                    )
                file_title = file['title']
                file_metadata = {'title': file_title}
                if folder_id:
                    file_metadata['parents'] = [{'id': folder_id}]
                file = drive.CreateFile(file_metadata)
                file.SetContentFile(dir)
                file.Upload()
                bot.send_document(
                    chat_id=chat_id,
                    document=f
                    )
                markup = types.InlineKeyboardMarkup(row_width=1)
                markup.row(
                    types.InlineKeyboardButton(
                        text=ButtonsText.back,
                        callback_data=func
                        ),
                    types.InlineKeyboardButton(
                        text=ButtonsText.main,
                        callback_data='main'
                        )
                )
                bot.send_message(
                    chat_id=chat_id,
                    text=f'–§–∞–π–ª {file["title"]} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!',
                    reply_markup = markup
                    )
            os.remove(dir)


@bot.callback_query_handler(func=lambda call: call.data[:4] =='DELE')
def delete_file(call):
    drive = pyDrive()
    bot.delete_message(
        chat_id = call.message.chat.id,
        message_id = call.message.message_id
        )
    global cache_data
    file_name = call.data[4:]
    data = cache_data[file_name]
    parts = data.split(':')
    file_id = parts[1]
    id = parts[2]
    func = parts[3]
    file = drive.CreateFile({'id': file_id})
    file.Delete()
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.row(
        types.InlineKeyboardButton(
            text=ButtonsText.back,
            callback_data=func
            ),
        types.InlineKeyboardButton(
            text=ButtonsText.main,
            callback_data='main'
            )
    )
    bot.send_message(
        chat_id=id,
        text="–£—Å–ø–µ—à–Ω–æ!",
        reply_markup=markup
        )


@bot.message_handler(commands=['start'])
def do_start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard = True)
    markup.add(types.KeyboardButton(text='–ü–æ–≥–Ω–∞–ª–∏!'))

    bot.send_message(
        chat_id = message.chat.id,
        text = f'–ü—Ä–∏–≤–µ—Ç!\n–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ '
        f'–±–æ—Ç–∞ –õ–æ–∫–∞—Ü–∏—è.–ü–æ–º–æ—â–Ω–∏–∫üìç\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ '
        f'—É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ —Å–º–µ–Ω–µ.\n'
        f'–î–∞–≤–∞–π —Å–∫–æ—Ä–µ–µ –∂–µ –Ω–∞—á–Ω–µ–º!ü§ì',
        reply_markup = markup)


@bot.message_handler(func=lambda message: message.text == '–ü–æ–≥–Ω–∞–ª–∏!')
def auth(message):
    if check_user(
        user_id=message.chat.id,
        param='user_name'
        ) == None:
        bot.send_message(
            chat_id=message.chat.id,
            text='–ö–∞–∂–µ—Ç—Å—è, –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Ç—ã –≤–ø–µ—Ä–≤—ã–µ. –î–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!'
            )
        first_name(message)
    else:
        bot.send_message(
            chat_id=message.chat.id,
            text='–ö–∞–∂–µ—Ç—Å—è, —Ç—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Ä–∞–±–æ—Ç–µ!'
            )
        help_button(message)


def first_name(message):
    id = message.chat.id
    txt = '–í–≤–µ–¥–∏ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é'
    bot.send_message(
        chat_id=id,
        text=txt
        )
    bot.register_next_step_handler(
        message=message,
        callback=complete_reg
        )


def complete_reg(message):
    drive = pyDrive()
    parent_folder = '1s_nzGkAUE4_vVZEbrgAcom1pzd1CtVoc'     # Users

    folder_metadata = {
        'title': f'{message.text}',     #Folder of user
        'parents':[{'id': parent_folder}],
        'mimeType': 'application/vnd.google-apps.folder'
    }
    main_folder = drive.CreateFile(folder_metadata)
    main_folder.Upload()

    folder_metadata = {
        'title': f'{"Methods"}',    #Methods folder of user
        'parents':[{'id': main_folder["id"]}],
        'mimeType': 'application/vnd.google-apps.folder'
    }
    folder1 = drive.CreateFile(folder_metadata)
    folder1.Upload()

    folder_metadata = {
        'title': f'{"Diary"}',      #Diary folder of user
        'parents':[{'id': main_folder["id"]}],
        'mimeType': 'application/vnd.google-apps.folder'
    }
    folder2 = drive.CreateFile(folder_metadata)
    folder2.Upload()

    with open('Admin/DB.txt', 'r') as f:
        text = f.read()

    with open('Admin/DB.txt', 'w') as f:
        text += f'{message.chat.id}: {message.text}: {main_folder["id"]}: {folder1["id"]}: {folder2["id"]}\n'
        f.write(text)

    bot.send_message(
        chat_id=message.chat.id,
        text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'
    )


    ab_markup = types.InlineKeyboardMarkup(row_width=2)
    ab_markup.row(
        types.InlineKeyboardButton(
            text='–û—Å—Ç–∞–≤–∏—Ç—å',
            callback_data='leave_user'
            ),
        types.InlineKeyboardButton(
            text='–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',
            callback_data=f'DELUS_{message.chat.id}'
            )
    )

    ab.send_message(
        chat_id = message.chat.id,
        text=f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}.',
        reply_markup=ab_markup
    )

    help_button(message)


@ab.callback_query_handler(func=lambda call: call.data == 'leave_user')
def leave_user(call):
    bot.delete_message(
        chat_id = call.message.chat.id,
        message_id = call.message.message_id
        )


def help_button(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)

    markup.add(types.KeyboardButton(ButtonsText.main))

    bot.send_message(
        chat_id = message.chat.id,
        text=f'–¢—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ.\n'
        f'–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É\n'
        f'{ButtonsText.main} –≤–Ω–∏–∑—É',
        reply_markup = markup
        )


@bot.callback_query_handler(func=lambda call: call.data == 'main')
def go_to_main(call):
    do_main(call.message)


@bot.message_handler(func=lambda message: message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìç')
def do_main(message):
    bot.delete_message(chat_id = message.chat.id, message_id = message.message_id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(
            text=ButtonsText.methods,
            callback_data='methods'
            ),

        types.InlineKeyboardButton(
            text=ButtonsText.diary,
            callback_data='choose_year'
            ),

        types.InlineKeyboardButton(
                text=ButtonsText.HelpNavigation,
                callback_data='help_navigation'
                )
    )
    bot.send_message(
        chat_id = message.chat.id,
        text = '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: ',
        reply_markup = markup
        )


@bot.callback_query_handler(func=lambda call: call.data == 'methods')
def methods(call):
    bot.delete_message(
        chat_id = call.message.chat.id,
        message_id = call.message.message_id
        )
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(
            text = ButtonsText.search_admin,
            callback_data = 'admin_methods'
            ),

        types.InlineKeyboardButton(
                text = ButtonsText.library,
                callback_data = 'library'
                ),

        types.InlineKeyboardButton(
            text = ButtonsText.upload,
            callback_data = 'upload'
            ),

        types.InlineKeyboardButton(
            text = ButtonsText.main,
            callback_data = 'main'
            )
        )
    bot.send_message(
        chat_id = call.message.chat.id,
        text = '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: ',
        reply_markup = markup
        )


@bot.callback_query_handler(func=lambda call: call.data == 'admin_methods')
def admin_methods(call):
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    folder = '1gXDbDUoYDfI6cFhwbIrq35SpOZCyYhxm'
    user_id = call.message.chat.id
    list_files = check_folder(folder)
    markup = types.InlineKeyboardMarkup(row_width=1)
    for file in list_files:
        call_data = f'{folder}:{file["id"]}:{user_id}:admin_methods'
        adm_cache[file['title']] = call_data
        markup.add(
            types.InlineKeyboardButton(
                text=file['title'],
                callback_data=file['title']
                )
            )
    markup.add(
        types.InlineKeyboardButton(
            text = ButtonsText.back,
            callback_data = 'methods'
            ),

        types.InlineKeyboardButton(
            text = ButtonsText.main,
            callback_data = 'main'
            )
        )
    txt = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'
    bot.send_message(
        chat_id=user_id,
        text=txt,
        reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data == 'library')
def library(call):
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    folder = check_user(call.message.chat.id, 'methods_folder_id')
    user_id = call.message.chat.id
    list_files = check_folder(folder)
    markup = types.InlineKeyboardMarkup(row_width=1)
    if len(list_files) != 0:
        for file in list_files:
            call_data = f'{folder}:{file["id"]}:{user_id}:library'
            cache_data[file['title']] = call_data
            markup.add(
                types.InlineKeyboardButton(
                    text=file['title'],
                    callback_data=file['title']
                    ),
            )
        markup.add(
            types.InlineKeyboardButton(
                text = ButtonsText.back,
                callback_data = 'methods'
                ),

            types.InlineKeyboardButton(
                text = ButtonsText.main,
                callback_data = 'main'
                )
        )
        txt = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'
        bot.send_message(
            chat_id=call.message.chat.id,
            text=txt,
            reply_markup=markup
            )

    else:
        txt = '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ —ç—Ç–æ–π –ø–∞–ø–∫–µ –ø—É—Å—Ç–æ, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –æ—Ç –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤.'
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(
                text = ButtonsText.search_admin,
                callback_data = 'admin_methods'
                ),

            types.InlineKeyboardButton(
                text = ButtonsText.upload,
                callback_data = 'upload'
                ),

            types.InlineKeyboardButton(
                text = ButtonsText.main,
                callback_data = 'main'
                )
            )
        bot.send_message(
            chat_id = call.message.chat.id,
            text = txt,
            reply_markup = markup
            )


@bot.callback_query_handler(func=lambda call: call.data == 'upload')
def upload(call):
    bot.delete_message(
        chat_id = call.message.chat.id,
        message_id = call.message.message_id
        )
    bot.send_message(
        chat_id=call.message.chat.id,
        text='–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç'
        )
    bot.register_next_step_handler(
        message=call.message,
        callback=g_upload
        )


def g_upload(message):
    drive = pyDrive()
    if message.document is not None:
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìç', callback_data = 'main'))

        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        path = f'Cache/{message.document.file_name}'
        file_title = message.document.file_name
        with open(path, 'wb') as new_file:
            new_file.write(downloaded_file)
    elif message.photo[-1] is not None:
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(
                text = ButtonsText.main,
                callback_data = 'main'
                )
            )

        photo = message.photo[-1]
        file_id = photo.file_id
        file_info = bot.get_file(file_id)
        file_url = f'https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}'
        try:
            file_title = photo.file_name
        except Exception as e:
            file_title = 'img.jpg'
        path = f'Cache/{file_title}'
        response = requests.get(file_url)
        if response.status_code == 200:
            with open(path, 'wb') as file:
                file.write(response.content)

    folder_id = check_user(
        user_id=message.chat.id,
        param="methods_folder_id"
        )
    file_metadata = {'title': file_title}
    if folder_id:
        file_metadata['parents'] = [{'id': folder_id}]
    file = drive.CreateFile(file_metadata)
    file.SetContentFile(path)
    file.Upload()
    bot.send_message(
        chat_id=message.chat.id,
        text=f'–§–∞–π–ª {file_title} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!',
        reply_markup=markup
        )
    os.remove(path)


@bot.callback_query_handler(func=lambda call: call.data == 'main')
def main(call):
    do_main(call.message)


@bot.callback_query_handler(func=lambda call: call.data == 'choose_year')
def choose_year(call):
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    list_files = check_folder('1GKxxMDjrkuO40Xlt97oKdoEZa9ErFdGW')
    markup = types.InlineKeyboardMarkup(row_width=1)
    for file in list_files:
        PD_data['Year'] = file['id']
        markup.add(
            types.InlineKeyboardButton(
                text=file['title'],
                callback_data=file['id']
                )
        )
    markup.add(
        types.InlineKeyboardButton(
            text = ButtonsText.main,
            callback_data = 'main'
            )
        )
    txt = '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥üìÖ'
    bot.send_message(
        chat_id=call.message.chat.id,
        text=txt,
        reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data in PD_data['Year'])
def choose_camp(call):
    bot.delete_message(
        chat_id = call.message.chat.id,
        message_id = call.message.message_id
        )
    PD_log['Year'] = call.data
    list_files = check_folder(call.data)
    markup = types.InlineKeyboardMarkup(row_width=1)
    for file in list_files:
        PD_data['Camp'].append(file['id'])
        markup.add(
            types.InlineKeyboardButton(
                text=file['title'],
                callback_data=file['id']
                )
        )
    markup.add(
        types.InlineKeyboardButton(
            text = ButtonsText.main,
            callback_data = 'main'
            ),
        types.InlineKeyboardButton(
            text = ButtonsText.ChooseYear,
            callback_data = 'choose_year'
            )
    )
    txt = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É‚õ≥'
    bot.send_message(
        chat_id=call.message.chat.id,
        text=txt,
        reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data in PD_data['Camp'])
def squad(call):
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    PD_log['Camp'] = call.data
    list_files = check_folder(call.data)
    markup = types.InlineKeyboardMarkup(row_width=1)
    for file in list_files:
        PD_data['Squad'].append(file['id'])
        markup.add(
            types.InlineKeyboardButton(
                text=file['title'],
                callback_data=file['id']
                )
            )
    markup.add(
        types.InlineKeyboardButton(
            text = ButtonsText.ChooseYear,
            callback_data = 'choose_year'
            ),
        types.InlineKeyboardButton(
            text = ButtonsText.ChooseCamp,
            callback_data = f'{PD_log["Year"]}'
            )
        )
    markup.add(
        types.InlineKeyboardButton(
            text = ButtonsText.main,
            callback_data = 'main'
            )
        )
    txt = '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä—è–¥ü´Ç'
    bot.send_message(
        chat_id=call.message.chat.id,
        text=txt,
        reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data in PD_data['Squad'])
def choose_file(call):
    bot.delete_message(
        chat_id = call.message.chat.id,
        message_id = call.message.message_id
        )
    PD_log['Squad'] = call.data

    user_id = call.message.chat.id
    folder = call.data
    list_files = check_folder(folder)
    markup = types.InlineKeyboardMarkup(row_width=5)
    markup_row = []
    if len(list_files) != 0:
        txt = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª\n'
        for i in range(0, len(list_files)):
            call_data = f'{folder}:{list_files[i]["id"]}:{user_id}:{folder}'
            cache_data[list_files[i]['title']] = call_data
            txt += f'{i+1} - {list_files[i]["title"]}\n'
            markup_row.append(
                types.InlineKeyboardButton(
                    text=f'{i + 1}',
                    callback_data=list_files[i]['title']
                    )
            )
            if len(markup_row) == 5:
                markup.row(*markup_row)
                markup_row = []
        if len(markup_row) != 0:
            markup.row(*markup_row)
    else:
        txt = '–ü–æ–∫–∞ —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–∏ —Ñ–∞–π–ª—ã –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å!'
    markup.row(
        types.InlineKeyboardButton(
            text = ButtonsText.CreateFile,
            callback_data = 'create_PD'
            )
        )
    markup.row(
        types.InlineKeyboardButton(
            text = ButtonsText.UploadFile,
            callback_data = 'upload_PD'
            )
        )
    markup.row(
        types.InlineKeyboardButton(
            text = ButtonsText.main,
            callback_data = 'main'
            )
        )
    markup.row(
        types.InlineKeyboardButton(
            text = ButtonsText.ChooseYear,
            callback_data = 'choose_year'
            )
        )
    markup.row(types.InlineKeyboardButton(
        text = ButtonsText.ChooseCamp,
        callback_data = f'{PD_log["Year"]}'
            )
        )
    markup.row(
        types.InlineKeyboardButton(
            text = ButtonsText.ChooseSquad,
            callback_data = f'{PD_log["Camp"]}'
            )
        )
    bot.send_message(
        chat_id=call.message.chat.id,
        text=txt,
        reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data == 'upload_PD')
def upload(call):
    bot.delete_message(
        chat_id = call.message.chat.id,
        message_id = call.message.message_id
        )
    bot.send_message(
        call.message.chat.id,
        '–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç'
        )
    bot.register_next_step_handler(
        call.message,
        PD_upload
        )


def PD_upload(message):
    drive = pyDrive()
    bot.delete_message(chat_id = message.chat.id, message_id = message.message_id)
    if message.document is not None:
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(
                text = ButtonsText.main,
                callback_data = 'main'
                ),
            types.InlineKeyboardButton(
                text = ButtonsText.back,
                callback_data = f'{PD_log["Squad"]}'
                )
            )
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        path = f'Cache/{message.document.file_name}'
        file_title = message.document.file_name
        with open(path, 'wb') as new_file:
            new_file.write(downloaded_file)
    elif message.photo[-1] is not None:
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(
                text = ButtonsText.main,
                callback_data = 'main'
                )
            )

        photo = message.photo[-1]
        file_id = photo.file_id
        file_info = bot.get_file(file_id)
        file_url = f'https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}'
        try:
            file_title = photo.file_name
        except Exception as e:
            file_title = 'img.jpg'
        path = f'Cache/{file_title}'
        response = requests.get(file_url)
        if response.status_code == 200:
            with open(path, 'wb') as file:
                file.write(response.content)

    folder_id = PD_log['Squad']

    file_metadata = {'title': file_title}
    if folder_id:
        file_metadata['parents'] = [{'id': folder_id}]

    file = drive.CreateFile(file_metadata)
    file.SetContentFile(path)
    file.Upload()
    bot.send_message(
        message.chat.id,
        text=f'–§–∞–π–ª {file_title} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!',
        reply_markup=markup
        )
    os.remove(path)


@bot.callback_query_handler(func=lambda call: call.data == 'create_PD')
def new_note(call):
    global answers
    answers = {
        'Q1': '–ü—É—Å—Ç–æ',
        'Q2': '–ü—É—Å—Ç–æ',
        'Q3': '–ü—É—Å—Ç–æ',
        'Q4': '–ü—É—Å—Ç–æ',
        'Q5': '–ü—É—Å—Ç–æ',
        'Q6': '–ü—É—Å—Ç–æ'
    }
    create_PD(call)


def JUMP_create(call):
    create_PD(call.message)


@bot.callback_query_handler(func=lambda call: call.data == 'doc_now')
def create_PD(call):
    id = call.message.chat.id
    text = f'''
    '''

    message_text = f'''
1 - –∏–∑–º–µ–Ω–∏—Ç—å "{questions['Q1']}"
2 - –∏–∑–º–µ–Ω–∏—Ç—å "{questions['Q2']}"
3 - –∏–∑–º–µ–Ω–∏—Ç—å "{questions['Q3']}"
4 - –∏–∑–º–µ–Ω–∏—Ç—å "{questions['Q4']}"
5 - –∏–∑–º–µ–Ω–∏—Ç—å "{questions['Q5']}"
6 - –∏–∑–º–µ–Ω–∏—Ç—å "{questions['Q6']}"
üóÑ - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
üìÅ - –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ñ–∞–π–ª–æ–≤
‚ùî - –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    '''
    markup = types.InlineKeyboardMarkup(row_width=5)
    markup.row(
        types.InlineKeyboardButton(
            text='1', callback_data='Q1'
        ),
        types.InlineKeyboardButton(
            text='2', callback_data='Q2'
        ),
        types.InlineKeyboardButton(
            text='3', callback_data='Q3'
        ),
        types.InlineKeyboardButton(
            text='4', callback_data='Q4'
        ),
        types.InlineKeyboardButton(
            text='5', callback_data='Q5'
        ),
        types.InlineKeyboardButton(
            text='6', callback_data='Q6'
        )
    )
    markup.row(
        types.InlineKeyboardButton(
            text='üóÑ', callback_data='save_doc'
    ),
        types.InlineKeyboardButton(
            text='üìÅ', callback_data=f'{PD_log["Squad"]}'
    ),
        types.InlineKeyboardButton(
            text='‚ùî', callback_data='rules_PD'
    ))
    dir = 'Admin/–ü–ª–∞–Ω –∞–Ω–∞–ª–∏–∑–∞.jpg'
    bot.send_photo(
        chat_id=id,
        photo = open(dir, 'rb'),
        caption = text

    )
    bot.send_message(
        chat_id=call.message.chat.id,
        text=message_text,
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data in questions.keys())
def edit_note(call):
    id = call.message.chat.id
    global ans_now
    ans_now = call.data
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(types.InlineKeyboardButton(text='–û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç', callback_data='doc_now'))
    bot.send_message(
        chat_id=id,
        text=f'–û—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n"{answers[ans_now]}"'
        )
    bot.send_message(
        chat_id=call.message.chat.id,
        text=f'–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –ø—É–Ω–∫—Ç "{questions[ans_now]}"',
        reply_markup=markup
        )
    bot.register_next_step_handler(
        message=call.message,
        callback=save_ans
        )


def save_ans(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.row(
        types.InlineKeyboardButton(
            text='–í –Ω–∞—á–∞–ª–æüóÑ', callback_data='doc_now'
    ))
    answers[ans_now] = message.text
    bot.send_message(
        chat_id=message.chat.id,
        text='–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω',
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == 'rules_PD')
def rules_PD(call):
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(text = ButtonsText.doContinue, callback_data = 'PD_note'),
        types.InlineKeyboardButton(text = ButtonsText.back, callback_data = f'{PD_log["Squad"]}')
        )

    text = AnswerText.RulesPD
    bot.send_message(
        chat_id=call.message.chat.id,
        text=text,
        reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data =='save_doc')
def naming(call):
    bot.delete_message(
        chat_id = call.message.chat.id,
        message_id = call.message.message_id
        )
    bot.send_message(
        chat_id=call.message.chat.id,
        text=AnswerText.TypeNameDoc
    )
    bot.register_next_step_handler(
        message=call.message,
        callback=saving)


def paragraph_add(
        doc,
        text: str,
        heading: bool
        ):
    paragraph = doc.add_paragraph(
        text,
        style = 'heading1' if heading else 'normal'
        )
    paragraph_format = paragraph.paragraph_format
    paragraph_format.left_indent = Inches(0.49)
    paragraph_format.line_spacing = 1.5


def saving(message):
    drive = pyDrive()
    global document
    document = Document()

    heading1 = document.styles.add_style(
            'heading1', WD_STYLE_TYPE.PARAGRAPH
        )
    heading1.base_style = document.styles['Normal']
    font = heading1.font
    font.name = 'Times New Roman'
    font.size = Pt(14)
    font.bold = True

    normal = document.styles.add_style(
            'normal', WD_STYLE_TYPE.PARAGRAPH
        )
    font = normal.font
    font.name = 'Times New Roman'
    font.size = Pt(14)
    font.bold = False

    for quest in questions.keys():
        paragraph_add(
            doc=document,
            text=questions[quest],
            heading=True
            )
        paragraph_add(
            doc=document,
            text=answers[quest],
            heading=False
            )
    file_title = f'{message.text}.docx'
    document.save(f'Cache/{file_title}')

    path = f'Cache/{file_title}'
    folder_id = PD_log['Squad']
    file_metadata = {'title': file_title}
    if folder_id:
        file_metadata['parents'] = [{'id': folder_id}]
    file = drive.CreateFile(file_metadata)
    file.SetContentFile(path)
    file.Upload()
    os.remove(path)

    markup = types.InlineKeyboardMarkup(row_width = 1)
    markup.add(
        types.InlineKeyboardButton(
            text=ButtonsText.main,
            callback_data = 'main'
            ),
        types.InlineKeyboardButton(
            text=ButtonsText.back,
            callback_data = f'{PD_log["Squad"]}'
            )
    )
    bot.send_message(
        chat_id = message.chat.id,
        text = f'–§–∞–π–ª {file_title} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!',
        reply_markup=markup
        )


    ab.send_message(
        chat_id = message.chat.id,
        text = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {check_user(message.chat.id, "user_name")} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª {file_title}',
        reply_markup=markup
        )


@bot.callback_query_handler(func=lambda call: call.data == 'help_navigation')
def help_navigation(call):
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    markup = types.InlineKeyboardMarkup(row_width = 1)
    markup.add(
        types.InlineKeyboardButton(
            text = ButtonsText.main, 
            callback_data = 'main'
        )
    )

    info_text = AnswerText.HelpInfo
    bot.send_message(
        chat_id = call.message.chat.id,
        text = info_text,
        reply_markup = markup
        )


if __name__ == '__main__':
    bot.polling(non_stop = True)