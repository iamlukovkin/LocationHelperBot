import os
import shutil
import datetime
import logging
import time

import telebot as tb

from telebot import types
from pathlib import Path
from docx import Document
from docx.shared import Pt
from docx import Document
from docx.shared import Inches, Pt
from docx.enum.style import WD_STYLE_TYPE
from pydrive.auth import GoogleAuth, ServiceAccountCredentials
from pydrive.drive import GoogleDrive


def pyDrive():
    gauth = GoogleAuth()
    scope = ["https://www.googleapis.com/auth/drive"]
    gauth.credentials = ServiceAccountCredentials.from_json_keyfile_name('locationbot-389713-571b4d9edd7a.json', scope)
    gauth.Authorize()
    drive = GoogleDrive(gauth)
    return drive


chat_api = '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'
TOKEN = '6048732407:AAEGRA6prdW1ymtjLamIvn53_vDh_IyQ5yE'
ADMIN_TOKEN = '5974126919:AAEURflwb8Gmqzy_iEhp4Gy3DqF6wxgE_Ks'

us_bot = tb.TeleBot(token = TOKEN)
bot = tb.TeleBot(token = ADMIN_TOKEN)

methods_id = '1gXDbDUoYDfI6cFhwbIrq35SpOZCyYhxm'

cache_data = {}
del_cache = {}
adm_cache = {}

cache_message = ''

PD_log = {
    'Year': '',
    'Camp': '',
    'Squad': ''
}

PD_data = {
    'Year': [],
    'Camp': [],
    'Squad': []
}

pwd = 'Location_is_my_love'


def check_folder(folder_id):
    drive = pyDrive()
    file_list = drive.ListFile({'q': f"'{folder_id}' in parents and trashed=false"}).GetList()
    return file_list


def check_user(user_id, param):
    ans = None
    if param == 'user_name':
        search = 1
    elif param == 'folder_id':
        search = 2
    elif param == 'methods_folder_id':
        search = 3
    elif param == 'diary_folder_id':
        search = 4
    with open('Admin/DB.txt', 'r') as f:
        for line in f:
            line = line.strip()
            parts = line.split(":")
            for i in range(0, len(parts)):
                if parts[0] == str(user_id):
                    ans = parts[search].strip() if search != 1 else parts[search]
    return ans


@bot.callback_query_handler(func=lambda call: call.data in cache_data.keys())
def accept_file(call):
    global cache_data
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    id = call.message.chat.id
    txt = f'–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ñ–∞–π–ª–æ–º "{call.data}"?'
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.row(
        types.InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å‚¨áÔ∏è', callback_data=f'DOWN{call.data}'),
        types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—åüóë', callback_data=f'DELE{call.data}')
    )
    bot.send_message(chat_id=id, text=txt, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data[:4] =='DOWN')
def get_file_usr(call):
    drive = pyDrive()
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    global cache_data
    file_name = call.data[4:]
    data = cache_data[file_name]
    parts = data.split(':')
    dir_id = parts[0]
    file_id = parts[1]
    chat_id = parts[2]
    func = parts[3]
    list_files = check_folder(dir_id)
    for file in list_files:
        dir = f"Cache/{file['title']}"
        if file_id == file['id']:
            file = drive.CreateFile({'id': file_id})
            file.GetContentFile(dir)
            bot.send_document(chat_id=chat_id, document=open(dir, 'rb'))
            markup = types.InlineKeyboardMarkup(row_width=1)
            markup.row(
                types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥üîÑ', callback_data=func),
                types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìç', callback_data='main')
            )
            bot.send_message(chat_id=chat_id, text=f'–§–∞–π–ª {file["title"]} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω!', reply_markup = markup)
            os.remove(dir)


@bot.callback_query_handler(func=lambda call: call.data[:4] =='DELE')
def delete_file(call):
    drive = pyDrive()
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    global cache_data
    file_name = call.data[4:]
    data = cache_data[file_name]
    parts = data.split(':')
    file_id = parts[1]
    id = parts[2]
    func = parts[3]
    file = drive.CreateFile({'id': file_id})
    file.Delete()
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.row(
        types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥üîÑ', callback_data=func),
        types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìç', callback_data='main')
    )
    bot.send_message(chat_id=id, text="–£—Å–ø–µ—à–Ω–æ!", reply_markup=markup)


@bot.message_handler(commands=['start'])
def auth(message):
    bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
    bot.register_next_step_handler(message, check_pwd)


def check_pwd(message):
    if message.text == pwd:
        bot.delete_message(chat_id = message.chat.id, message_id = message.message_id)
        hello(message)
    else:
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!')
        auth(message)
    

def hello(message):
    id = message.chat.id
    text = '''
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –≠—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å –±–æ—Ç–∞ –õ–æ–∫–∞—Ü–∏—è.–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µüïπÔ∏è
–° –µ–≥–æ –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å:
- –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞–º–∏ –≤–æ–∂–∞—Ç—ã—Ö,
- –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
- –°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–æ—Ç–∞ –õ–æ–∫–∞—Ü–∏—è.–ü–æ–º–æ—â–Ω–∏–∫üìç
- –ù–∏ –≤ –∫–æ–µ–º —Å–ª—É—á–∞–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π –Ω–∏–∫–æ–º—É —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å, –∏–Ω–∞—á–µ –≤—Å–µ —É–∑–Ω–∞—é—Ç –æ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö –±–∞—Å–∏–∫–æ–≤ –≤ –ª–∏—á–Ω–æ–π –ø–∞–ø–∫–µ!

–í–∞–∂–Ω–æ: —ç—Ç–æ –æ–±—â–∏–π –±–æ—Ç –¥–ª—è –í–°–ï–• –º–µ—Ç–æ–¥–∏—Å—Ç–æ–≤. –£ –≤—Å–µ—Ö –æ–±—â–∞—è –±–∞–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ù–∞ –≤—Å–µ –ª–∏—á–Ω–æ–µ –µ—Å—Ç—å @LocationHelperBot
–£–¥–∞—á–∏!‚ù§Ô∏è
'''
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüïπÔ∏è', callback_data='main')
    )
    bot.send_message(chat_id=id, text=text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'main')
def do_main(call):
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(
        types.InlineKeyboardButton(text='–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —É–∫–∞–∑–∞–Ω–∏—èüìö', callback_data='methods'),

        types.InlineKeyboardButton(text='–ü–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–π –¥–Ω–µ–≤–Ω–∏–∫üìñ', callback_data='choose_year'),

        types.InlineKeyboardButton(text='–°–¥–µ–ª–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ‚ö†Ô∏è', callback_data='alert')
    )
    bot.send_message(chat_id = call.message.chat.id, text = '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup = markup)


@bot.callback_query_handler(func=lambda call: call.data == 'methods')
def admin_methods(call):
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    folder = '1gXDbDUoYDfI6cFhwbIrq35SpOZCyYhxm'
    user_id = call.message.chat.id
    list_files = check_folder(folder)
    markup = types.InlineKeyboardMarkup(row_width=1)
    for file in list_files:
        call_data = f'{folder}:{file["id"]}:{user_id}:methods'
        cache_data[file['title']] = call_data
        markup.add(
            types.InlineKeyboardButton(text=file['title'], callback_data=file['title'])
        )
    markup.add(      
        types.InlineKeyboardButton(text = '–ù–∞–∑–∞–¥üîÑ', callback_data = 'methods'),
        types.InlineKeyboardButton(text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìç', callback_data = 'main'),
        types.InlineKeyboardButton(text = '–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—ÇüìÑ', callback_data = 'load')
    )
    txt = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'
    bot.send_message(chat_id=user_id, text=txt, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'load')
def upload(call):
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    bot.send_message(call.message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç')
    bot.register_next_step_handler(call.message, g_upload)


def g_upload(message):
    drive = pyDrive()
    if message.document is not None:
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(
            types.InlineKeyboardButton(text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìç', callback_data = 'main'))
        
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
    path = f'Admin_cache/{message.document.file_name}'
    with open(path, 'wb') as new_file:
        new_file.write(downloaded_file)
    
    folder_id = '1gXDbDUoYDfI6cFhwbIrq35SpOZCyYhxm'
    file_title = message.document.file_name
    file_metadata = {'title': file_title}
    if folder_id:
        file_metadata['parents'] = [{'id': folder_id}]

    file = drive.CreateFile(file_metadata)
    file.SetContentFile(path)
    file.Upload()
    bot.send_message(message.chat.id, text=f'–§–∞–π–ª {file_title} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!', reply_markup=markup)
    os.remove(path)
        

@bot.callback_query_handler(func=lambda call: call.data == 'choose_year')
def choose_year(call):
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    folder ='1GKxxMDjrkuO40Xlt97oKdoEZa9ErFdGW'
    list_files = check_folder(folder)
    markup = types.InlineKeyboardMarkup(row_width=1)
    for file in list_files:
        PD_data['Year'] = file['id']
        markup.add(
            types.InlineKeyboardButton(text=file['title'], callback_data=file['id'])
        )
    markup.add(
        types.InlineKeyboardButton(text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìç', callback_data = 'main')
        )
    txt = '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥üìÖ'
    bot.send_message(chat_id=call.message.chat.id, text=txt, reply_markup=markup)
    

@bot.callback_query_handler(func=lambda call: call.data in PD_data['Year'])
def choose_camp(call):
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    PD_log['Year'] = call.data
    list_files = check_folder(call.data)
    markup = types.InlineKeyboardMarkup(row_width=1)
    for file in list_files:
        PD_data['Camp'].append(file['id'])
        markup.add(
            types.InlineKeyboardButton(text=file['title'], callback_data=file['id'])
        )
    markup.add(
        types.InlineKeyboardButton(text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìç', callback_data = 'main'),
        types.InlineKeyboardButton(text = '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ–¥üìÖ', callback_data = 'choose_year')
    )
    txt = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–º–µ–Ω—É‚õ≥'
    bot.send_message(chat_id=call.message.chat.id, text=txt, reply_markup=markup)
    

@bot.callback_query_handler(func=lambda call: call.data in PD_data['Camp'])
def squad(call):
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    PD_log['Camp'] = call.data
    list_files = check_folder(call.data)
    markup = types.InlineKeyboardMarkup(row_width=1)
    for file in list_files:
        PD_data['Squad'].append(file['id'])
        markup.add(
            types.InlineKeyboardButton(text=file['title'], callback_data=file['id'])
        )
    markup.add(
        types.InlineKeyboardButton(text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìç', callback_data = 'main'),
        types.InlineKeyboardButton(text = '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ–¥üìÖ', callback_data = 'choose_year'),
        types.InlineKeyboardButton(text = '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–º–µ–Ω—É‚õ≥', callback_data = f'{PD_log["Year"]}')
        )
    txt = '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Ä—è–¥ü´Ç'
    bot.send_message(chat_id=call.message.chat.id, text=txt, reply_markup=markup)
    

@bot.callback_query_handler(func=lambda call: call.data in PD_data['Squad'])
def choose_file(call):
    bot.delete_message(chat_id = call.message.chat.id, message_id = call.message.message_id)
    PD_log['Squad'] = call.data
    
    user_id = call.message.chat.id
    folder = call.data
    list_files = check_folder(folder)
    markup = types.InlineKeyboardMarkup(row_width=5)
    markup_row = []
    if len(list_files) != 0:
        txt = '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª\n'
        for i in range(0, len(list_files)):
            call_data = f'{folder}:{list_files[i]["id"]}:{user_id}:{folder}'
            cache_data[list_files[i]['title']] = call_data
            txt += f'{i+1} - {list_files[i]["title"]}\n'
            markup_row.append(
                types.InlineKeyboardButton(text=f'{i + 1}', callback_data=list_files[i]['title'])
            )
            if len(markup_row) == 5:
                markup.row(*markup_row)
                markup_row = []
        if len(markup_row) != 0:
            markup.row(*markup_row)
    else:
        txt = '–ü–æ–∫–∞ —á—Ç–æ –∑–¥–µ—Å—å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–æ–∏ —Ñ–∞–π–ª—ã –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø—Ä—è–º–æ –∑–¥–µ—Å—å!'
    markup.row(types.InlineKeyboardButton(text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìç', callback_data = 'main'))
    markup.row(types.InlineKeyboardButton(text = '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ–¥üìÖ', callback_data = 'choose_year'))
    markup.row(types.InlineKeyboardButton(text = '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å–º–µ–Ω—É‚õ≥', callback_data = f'{PD_log["Year"]}'))
    markup.row(types.InlineKeyboardButton(text = '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç—Ä—è–¥ü´Ç', callback_data = f'{PD_log["Camp"]}'))
    bot.send_message(chat_id=call.message.chat.id, text=txt, reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'alert')
def alert(call):
    bot.send_message(call.message.chat.id, text='–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è')
    bot.register_next_step_handler(call.message, sending)



def get_users():
    mass = []
    with open('Admin/DB.txt', 'r') as f:
        for line in f:
            line = line.strip()
            parts = line.split(":")
            mass.append(parts[0])
    return mass

mass = get_users()

def sending(message):
    markup = types.InlineKeyboardMarkup(row_width=5)
    markup.row(types.InlineKeyboardButton(text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüìç', callback_data = 'main'))
    for user in get_users():
        us_bot.send_message(
            chat_id = user,
            text = f'–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è!\n\n{message.text}',
            reply_markup=markup
        )
    
    bot.send_message(
        chat_id=message.chat.id,
        text = '–ì–æ—Ç–æ–≤–æ!',
        reply_markup=markup
    ),



def handle_photo(message):
    drive = pyDrive()
    photo_dst = f'Admin_cache/'
    file_id = message.photo[-1].file_id
    file = bot.get_file(file_id)
    file_name = file.file_path.split('/')[-1]
    downloaded_file = bot.download_file(file.file_path)

    with open(file_name, 'wb') as new_file:
        new_file.write(downloaded_file)

    shutil.move(file_name, f'{photo_dst}photo.jpg')



if __name__ == '__main__':
    bot.polling(non_stop = True)
